🎯 슬롯 타입별 페이지 구현 완벽 가이드
===============================================

📋 개요
- VIP와 APP 페이지를 성공적으로 구현한 경험을 바탕으로 한 완벽한 가이드
- 5개 정도 더 만들 때 한 번에 성공할 수 있도록 체계적으로 정리

🔧 1. 데이터베이스 준비
===============================================

1-1. 새로운 슬롯 타입 테이블 생성 (예: slot_naver, slot_place 등)
```sql
CREATE TABLE slot_[새로운타입] (
  -- slot_status 테이블과 100% 동일한 구조
  id BIGSERIAL PRIMARY KEY,
  customer_id TEXT NOT NULL,
  customer_name TEXT NOT NULL,
  distributor TEXT DEFAULT '일반',
  work_group TEXT DEFAULT '공통',
  keyword TEXT NOT NULL,
  link_url TEXT NOT NULL,
  memo TEXT,
  current_rank TEXT DEFAULT '1 [0]',
  start_rank TEXT DEFAULT '1 [0]',
  slot_count INTEGER DEFAULT 1,
  traffic TEXT DEFAULT '0 (0/0)',
  equipment_group TEXT DEFAULT '지정안함',
  status TEXT DEFAULT '작동중' CHECK (status IN ('작동중', '만료', '정지')),
  created_at TIMESTAMP,
  updated_at TIMESTAMP,
  slot_type TEXT,
  usage_days INTEGER DEFAULT 30,
  slot_sequence INTEGER,
  expiry_date TIMESTAMP NOT NULL
);
```

1-2. RLS 정책 추가 (필수!)
```sql
CREATE POLICY "Allow all operations for all users" ON slot_[새로운타입]
FOR ALL USING (true) WITH CHECK (true);
```

🚀 2. API 파일 생성
===============================================

2-1. API 파일 복사
```bash
cp src/app/api/slot-status/route.ts src/app/api/slot-[새로운타입]/route.ts
cp src/app/api/slot-status/[id]/route.ts src/app/api/slot-[새로운타입]/[id]/route.ts
```

2-2. API 파일 수정 포인트
```typescript
// src/app/api/slot-[새로운타입]/route.ts
// 1. 모든 'slot_status' → 'slot_[새로운타입]' 변경
// 2. 모든 '쿠팡' → '[새로운타입]' 변경
// 3. GET 메서드에서 .eq('slot_type', '[새로운타입]') 필터링 추가
// 4. POST 메서드에서 .eq('slot_type', '[새로운타입]') 필터링 추가
```

🌐 3. 프론트엔드 페이지 생성
===============================================

3-1. 페이지 파일 복사
```bash
cp src/app/coupangapp/add/page.tsx src/app/coupangapp/[새로운타입]/page.tsx
```

3-2. 페이지 파일 수정 포인트
```typescript
// src/app/coupangapp/[새로운타입]/page.tsx
// 1. 모든 '/api/slot-status' → '/api/slot-[새로운타입]' 변경
// 2. 모든 'slot_status' → 'slot_[새로운타입]' 변경
// 3. 모든 '쿠팡' → '[새로운타입]' 변경
// 4. loadCustomers 함수에서 API URL: '/api/slot-[새로운타입]?type=slot_status'
// 5. handleSubmit 함수에서 API 호출: '/api/slot-[새로운타입]'
```

⚙️ 4. 슬롯 추가 로직 수정
===============================================

```typescript
// src/app/api/slots/route.ts
// POST 메서드에서 슬롯 타입별 테이블 저장 로직 추가
let targetStatusTable = 'slot_status'; // 기본값
if (slotType === '쿠팡VIP') {
  targetStatusTable = 'slot_coupangvip';
} else if (slotType === '쿠팡APP') {
  targetStatusTable = 'slot_coupangapp';
} else if (slotType === '[새로운타입]') {  // ← 이 부분 추가
  targetStatusTable = 'slot_[새로운타입]';
}
```

📝 5. 슬롯 추가 페이지 수정
===============================================

```typescript
// src/app/slot-add/page.tsx
// SelectItem에 새로운 타입 추가
<SelectItem value="[새로운타입]">[새로운타입]</SelectItem>

// 리다이렉트 로직 추가
case '[새로운타입]':
  targetUrl = `/coupangapp/[새로운타입]?${params.toString()}`;
  break;
```

📊 6. 슬롯 현황 페이지 수정
===============================================

```typescript
// src/app/slot-status/page.tsx
// fetchSlotData 함수에 새로운 API 호출 추가
let newTypeApiUrl = '/api/slot-[새로운타입]';
if (isFilteredByCustomer && filteredCustomerInfo) {
  newTypeApiUrl += `?type=slot_status&customerId=${filteredCustomerInfo.id}&username=${filteredCustomerInfo.username}&name=${encodeURIComponent(filteredCustomerInfo.name)}`;
}
apiCalls.push(fetch(newTypeApiUrl).then(res => res.json()));

// 결과 처리에서 새로운 타입 추가
const slotType = ['쿠팡', '쿠팡VIP', '쿠팡APP', '[새로운타입]'][index];
```

✅ 7. 체크리스트 (한 번에 성공하기 위한 필수 확인사항)
===============================================

📋 데이터베이스
- [ ] 새로운 테이블 생성 (slot_status와 100% 동일한 구조)
- [ ] RLS 정책 추가 ("Allow all operations for all users")
- [ ] 테이블에 데이터 저장 테스트

🔌 API 파일
- [ ] `/api/slot-[새로운타입]/route.ts` 생성
- [ ] `/api/slot-[새로운타입]/[id]/route.ts` 생성
- [ ] 모든 'slot_status' → 'slot_[새로운타입]' 변경
- [ ] 모든 '쿠팡' → '[새로운타입]' 변경
- [ ] GET/POST 메서드에서 slot_type 필터링 추가

🌐 프론트엔드 페이지
- [ ] `/coupangapp/[새로운타입]/page.tsx` 생성
- [ ] 모든 API 호출 URL 변경
- [ ] loadCustomers 함수에서 올바른 API 호출
- [ ] handleSubmit 함수에서 올바른 API 호출

➕ 슬롯 추가 로직
- [ ] `/api/slots/route.ts`에서 새로운 타입 처리 추가
- [ ] `/slot-add/page.tsx`에서 새로운 타입 옵션 추가
- [ ] 리다이렉트 로직 추가

📈 슬롯 현황 페이지
- [ ] `/slot-status/page.tsx`에서 새로운 API 호출 추가
- [ ] 결과 병합 로직에 새로운 타입 추가

🧪 8. 테스트 순서
===============================================

1. 슬롯 추가 테스트: 새로운 타입으로 슬롯 추가 → 성공 확인
2. 페이지 접근 테스트: 새로운 타입 페이지 접근 → 로딩 확인
3. 작업등록 테스트: 새로운 타입 페이지에서 작업등록 → 성공 확인
4. 슬롯 목록 테스트: 작업등록 후 슬롯 목록 표시 확인
5. 슬롯 현황 테스트: 통합 슬롯 현황 페이지에서 새로운 타입 표시 확인

❌ 9. 실패 시 확인사항
===============================================

🔒 RLS 에러
- 문제: "new row violates row-level security policy"
- 해결: 테이블에 RLS 정책이 있는지 확인
- 명령: CREATE POLICY "Allow all operations for all users" ON slot_[새로운타입] FOR ALL USING (true) WITH CHECK (true);

🚫 500 에러
- 문제: Internal Server Error
- 해결: API 파일에서 테이블 이름이 올바른지 확인
- 확인: 모든 'slot_status' → 'slot_[새로운타입]' 변경되었는지

⚠️ 400 에러
- 문제: "사용 가능한 슬롯이 부족합니다"
- 해결: 슬롯 타입 필터링이 올바른지 확인
- 확인: .eq('slot_type', '[새로운타입]') 필터링 추가되었는지

📋 빈 목록
- 문제: 슬롯 목록이 표시되지 않음
- 해결: loadCustomers 함수의 API URL이 올바른지 확인
- 확인: '/api/slot-[새로운타입]?type=slot_status' 사용하는지

🎯 10. 핵심 포인트
===============================================

1. **데이터베이스**: 테이블 구조 100% 동일 + RLS 정책 필수
2. **API**: 모든 'slot_status' → 'slot_[새로운타입]' 변경 + slot_type 필터링
3. **프론트엔드**: 모든 API 호출 URL 변경 + loadCustomers 함수 수정
4. **슬롯 추가**: /api/slots에서 새로운 타입 처리 추가
5. **슬롯 현황**: 통합 페이지에서 새로운 API 호출 추가

이 가이드를 따라하시면 한 번에 성공할 수 있습니다! 🚀

📝 참고사항
- [새로운타입] 부분을 실제 타입명으로 교체 (예: naver, place, today-house 등)
- 모든 파일에서 일관되게 동일한 타입명 사용
- 테스트는 단계별로 진행하여 각 단계에서 문제 해결

